---
title: "Facturacion_seiton"
format: html
editor: visual
---

# Facturación Seiton

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Paqueterías

Se usarán las siguientes librerias:

```{r}
library(tidyverse)
library(tsibble)
library(lubridate)
library(ggplot2)
library(forecast)
library(easypackages)
library(timetk)
library(fpp3)
library(dplyr)
```

## Importación de Datos

```{r}
archivos <- unzip("C:/Users/Max Baylon/Desktop/ITESO/8vo Semestre/PaP Seiton/Seiton/Facturass_3.zip") |> 
  as_tibble() |> 
  filter(str_detect(value, ".xlsx"),
         str_detect(value, "MACOSX", negate = TRUE)) |> 
  pull(value)

datos_tbl <- archivos |> 
  map_df(~ readxl::read_excel(.x, col_types = "text"))|> 
  janitor::clean_names()
datos_tbl
```

## Limpieza de los Datos

```{r}
datos_tbl_tidy <- datos_tbl |> 
  mutate(
    across(c(n_contrato, n_cliente, bonificadas, ultima_lectura,lectura_actual, ctro_prod_impresiones_byn, paginas_procesadas_byn, paginas_procesadas_color, factura, renta_fija, excedente, subtotal, iva, total, total_paginas_procesadas), as.numeric), 
    
    facturado = if_else(is.na(dmy(facturado)),
                        as.Date(as.numeric(facturado), origin = "1899-12-30"),
                        dmy(facturado))     
  ) |> 
  drop_na(facturado)
datos_tbl_tidy 
```

## Analisis Exploratorio de los Datos

### Páginas procesadas mensuales

```{r}
datos_tbl <- datos_tbl_tidy |> 
  mutate(
    cond_x_eq = condicion_de_contrato == "Equipo"
  ) |> 
  group_by(n_contrato) |>
  summarise_by_time(
    .date_var = facturado,
    .by = "month",
    clics = sum(total_paginas_procesadas),
    .groups = "drop"
  ) |>
  as_tsibble(index = facturado, key = n_contrato) |>
  mutate(facturado = yearmonth(facturado))

datos_tbl
  # plot_time_series(
  #   .date_var = facturado,
  #   .value = clics,
  #   .smooth = FALSE
  # )
```

```{r}
#Paginas procesadas en los 3 años de manera mensual

ggplot(datos_tbl, aes(x = facturado, y = clics)) +
  geom_line(color = "navyblue", size = 1) +
  labs(title = "Páginas procesadas en todo el tiempo",
       x = "Fecha",
       y = "Páginas procesadas") +
  scale_y_continuous(labels = scales::comma) 

```

```{r}
# Convertir columna de fechas a formato "Date"
datos_tbl$facturado <- as.Date(datos_tbl$facturado)

# Filtrar filas que no corresponden a los años 2017 y 2021
tsibble_filtrado <- datos_tbl %>% 
  filter(format(facturado, "%Y") != "2017" & format(facturado, "%Y") != "2023")

# Convertir columna de fechas a formato "yearmonth"
tsibble_filtrado <- tsibble_filtrado %>% 
  mutate(facturado = yearmonth(facturado))

# Agrupar por fecha y sumar los clics
tsibble_suma <- tsibble_filtrado %>% 
  group_by(facturado) %>% 
  summarize(total_clics = sum(clics))

# Crear tsibble con la columna de fechas como índice
tsibble_final <- tsibble_suma %>% 
  as_tsibble(index = facturado)
tsibble_final
```

#### Gráfica de páginas procesadas mensualmente

```{r}
# Graficar tsibble_final
ggplot(tsibble_final, aes(x = facturado, y = total_clics)) +
  geom_line(color = "navyblue", size = 1) +
  labs(title = "Clics por mes", x = "Fecha", y = "Clics totales")
```

#### Análisis de Estacionalidad

```{r}
pag_ts <- tsibble_final %>%
  fill_gaps() 

gg_season(pag_ts, y= total_clics) +
  labs(x =  "Fecha", y = "Páginas",
       title = "Estacionalidad Páginas Procesadas")
```

```{r}
tsibble_final |> 
  model(STL(total_clics ~ season(period = 1), robust = TRUE)) |>
  components() |>

autoplot()
```

#### ARIMA

```{r}
tsibble_final %>% 
  gg_tsdisplay(difference(log(total_clics)),plot_type = "partial")
fitarima <- tsibble_final%>%
  model(
    arima1 = ARIMA(log(total_clics) ~ pdq(0:2,1,0:1) + PDQ(0,0,0)),
    arima2 = ARIMA(log(total_clics) ~ PDQ(0,0,0)),
  )%>% 
mutate(
  combinado=(arima1 + arima2)/2
)

fitarima %>% select(arima1) %>% report()
#fitarima %>% tidy()

fcarima <- fitarima %>% forecast(h = "1 year")

fcarima %>%
  filter(.model=="combinado") %>% 
  autoplot(tsibble_final) + xlab("Año") +
  ylab("total_clics") +
  scale_color_brewer(type = "qual", palette = "Dark2")
```

```{r}
forecast(fitarima, h=12) |>
  autoplot(tsibble_final) +
  labs(title = "Predicción de páginas procesadas a un año",
       y="Páginas procesadas")
```

#### Suavización Exponencial

```{r}
fit <- tsibble_final %>%
  model(
    additive = ETS(total_clics ~ error("A") + trend("A") + season("A")),
    multiplicative = ETS(total_clics ~ error("M") + trend("A") + season("M"))
  )

fit %>% tidy()

fc <- fit %>% forecast(h = "1 year")

fc %>%
  autoplot(tsibble_final, level = NULL) + xlab("Año") +
  ylab("total_clics") +
  scale_color_brewer(type = "qual", palette = "Dark2")
```

```{r}
fit <- tsibble_final |>
  model(ETS(log(total_clics)))
report(fit)
```

```{r}
components(fit) |>
  autoplot() +
  labs(title = "ETS(M,N,M) components")
```

```{r}
fit |>
  forecast(h=12) |>
  autoplot(tsibble_final)+
  labs(title="Predicción de páginas procesadas a un año",
       y="Páginas procesadas")
```

```{r}
outliers <- tsibble_final |>
  filter(
    total_clics < quantile(total_clics, 0.25) - 3*IQR(total_clics) |
    total_clics > quantile(total_clics, 0.75) + 3*IQR(total_clics)
  )
outliers
```

```{r}
tsibble_miss <- tsibble_final |> 
anti_join(outliers) |>
  # Replace with missing values
  fill_gaps()
tsibble_fill <- tsibble_miss |>
  # Fit ARIMA model to the data containing missing values
  model(ARIMA(total_clics)) |>
  # Estimate Trips for all periods
  interpolate(tsibble_miss)

tsibble_fill |>
  autoplot(total_clics)
```

```{r}

fit <- tsibble_fill |>
  model(ETS(log(total_clics)))
report(fit)
```

```{r}
components(fit) |>
  autoplot() +
  labs(title = "ETS(A,N,N) components")
```

```{r}
fit |>
  forecast(h=12) |>
  autoplot(tsibble_fill)+
  labs(title="Predicción de páginas procesadas a un año",
       y="Páginas procesadas")
```

```{r}
tsibble_fill %>% 
  gg_tsdisplay(difference(log(total_clics)),plot_type = "partial")
fitarima <- tsibble_fill%>%
  model(
    arima1 = ARIMA(log(total_clics) ~ pdq(0:2,1,0:1) + PDQ(0,0,0)),
    arima2 = ARIMA(log(total_clics) ~ PDQ(0,0,0)),
  )%>% 
mutate(
  combinado=(arima1 + arima2)/2
)

fitarima %>% select(arima1) %>% report()
#fitarima %>% tidy()

fcarima <- fitarima %>% forecast(h = "1 year")

fcarima %>%
  filter(.model=="combinado") %>% 
  autoplot(tsibble_fill) + xlab("Año") +
  ylab("total_clics") +
  scale_color_brewer(type = "qual", palette = "Dark2")
```

```{r}
forecast(fitarima, h=12) |>
  autoplot(tsibble_fill) +
  labs(title = "Predicción de páginas procesadas a un año",
       y="Páginas procesadas")
```

### Ventas totales mensuales

```{r}
datos_tbl2 <- datos_tbl_tidy |> 
  mutate(
    cond_x_eq = condicion_de_contrato == "Equipo"
  ) |> 
  group_by(folio) |>
  summarise_by_time(
    .date_var = facturado,
    .by = "month",
    ventas = sum(mean(as.numeric(total))),
    .groups = "drop"
  ) |>
  as_tsibble(index = facturado, key = folio) |>
  mutate(facturado = yearmonth(facturado))

datos_tbl2
#plot_time_series(
#     .date_var = facturado,
#     .value = ventas,
#     .smooth = FALSE
#   )
```

#### Gráfica de Ventas totales mensuales

```{r}
#Ventas en los 3 años mensual

ggplot(datos_tbl2, aes(x = facturado, y = ventas)) +
  geom_line(color = "navyblue", size = 1) +
  labs(title = "Ventas en los últimos 3 años",
       x = "Fecha",
       y = "ventas") +
  scale_y_continuous(labels = scales::comma) 

```

Limpieza de datos para eliminar 2017 y 2021 ya que no estan completos los años

```{r}
# Convertir columna de fechas a formato "Date"
datos_tbl2$facturado <- as.Date(datos_tbl2$facturado)

# Filtrar filas que no corresponden a los años 2017 y 2021
tsibble_filtrado2 <- datos_tbl2 %>% 
  filter(format(facturado, "%Y") != "2017" & format(facturado, "%Y") != "2023")

# Convertir columna de fechas a formato "yearmonth"
tsibble_filtrado2 <- tsibble_filtrado2 %>% 
  mutate(facturado = yearmonth(facturado))

# Agrupar por fecha y sumar los clics
tsibble_suma2 <- tsibble_filtrado2 %>% 
  group_by(facturado) %>% 
  summarize(Ventas = sum(ventas))

# Crear tsibble con la columna de fechas como índice
tsibble_final2 <- tsibble_suma2 %>% 
  as_tsibble(index = facturado)
tsibble_final2
```

```{r}
# Graficar tsibble_final
ggplot(tsibble_final2, aes(x = facturado, y = Ventas)) +
  geom_line(color = "navyblue", size = 1) +
  labs(title = "Ventas por mes", x = "Fecha", y = "Ventas totales")
```

#### Ánalisis de Estacionalidad

```{r}
ventas_ts <- tsibble_final2 %>%
  fill_gaps() 


gg_season(ventas_ts, y= Ventas) +
  labs(x = "Fecha",y = "Ventas",
       title = "Estacionalidad de las ventas por año")
```

```{r}
tsibble_final2 |> 
  model(STL(Ventas,robust = TRUE)) |>
  components() |>

autoplot()
```

#### ARIMA

```{r}

tsibble_final2 %>% 
  gg_tsdisplay(difference(log(Ventas)),plot_type = "partial")
  
fitarima <- tsibble_final2%>%
  model(
    arima1 = ARIMA(log(Ventas) ~ pdq(1,1,0) + PDQ(0,0,0)),
    arima2 = ARIMA(log(Ventas) ~PDQ(0,0,0)),
  ) %>% 
mutate(
  combinado=(arima1 + arima2)/2
)

fitarima %>% select(arima1) %>% report()
#fitarima %>% tidy()

fcarima <- fitarima %>% forecast(h = "1 year")

fcarima %>%
  filter(.model=="combinado") %>% 
  autoplot(tsibble_final2) + xlab("Año") +
  ylab("Ventas") +
  scale_color_brewer(type = "qual", palette = "Dark2")


```

```{r}
forecast(fitarima, h=12) |>
  autoplot(tsibble_final2) +
  labs(title = "Predicción de Ventas a un año",
       y="Páginas procesadas")
```

#### Suavización exponencial

```{r}
fit <- tsibble_final2 %>%
  model(
    additive = ETS(Ventas ~ error("A") + trend("A") + season("A")),
    multiplicative = ETS(Ventas ~ error("M") + trend("A") + season("M"))
  )

fit %>% tidy()

fc <- fit %>% forecast(h = "1 year")

fc %>%
  autoplot(tsibble_final2, level = NULL) + xlab("Año") +
  ylab("Ventas") +
  scale_color_brewer(type = "qual", palette = "Dark2")
```

```{r}

fit <- tsibble_final2 |>
  model(ETS(log(Ventas)))
report(fit)
```

```{r}
components(fit) |>
  autoplot() +
  labs(title = "ETS(M,N,N) components")
```

```{r}
fit |>
  forecast(h=12) |>
  autoplot(tsibble_final2)+
  labs(title="Predicción de ventas a un año",
       y="Ventas")
```

```{r}
outliers <- tsibble_final2 |>
  filter(
    Ventas < quantile(Ventas, 0.25) - 3*IQR(Ventas) |
    Ventas > quantile(Ventas, 0.75) + 3*IQR(Ventas)
  )
outliers
```

No tiene outliers.
